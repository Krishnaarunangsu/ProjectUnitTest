---
# Tests for login
test_name: 1.1 Normal login
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: login as user1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"user1", "pwd":"user1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_1

---

test_name: 1.2 Normal login - admin
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: login as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2

---

test_name: 1.3 2 simultaneous login by the same user
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: login as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2

  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
  - name: login again as admin1

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"admin1", "pwd":"admin1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "success"
      save:
        results:
          token: access_token
        $ext:
          function: test.xpresso_test.ai.admin.controller.validators:validate1_2
---

test_name: 1.4 Invalid login for user1
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: try to login as user1 with an invalid password

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"user1", "pwd":"junk"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "failure"
        error_code: 103

---

test_name: 1.5 No user id passed
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: try to login without passing the uid

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"pwd":"user1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "failure"
        error_code: 104

---

test_name: 1.6 No password passed
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: try to login without passing the password

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid":"user1"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "failure"
        error_code: 105

---

test_name: 1.7 Neither user id nor password passed
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: try to login without passing either the uid or the password

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "failure"
        error_code: 104

---

test_name: 1.8 user id with unusual characters
includes:
  - !include config.yml
marks:
  - usefixtures:
      - setup_users
# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: try to login using a uid with unusual characters

    # Define the request to be made...
    request:
      url: "{protocol:s}://{host:s}:{port:d}/auth"
      method: POST
      json: {"uid": "!@#$%^&*()[]\":;","pwd":"junk"}

    # ...and the expected response code and body
    response:
      status_code: 200
      body:
        outcome: "failure"
        error_code: 102

---
